#include "StdAfx.h"
#include "RouteId.h"

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
const FSecure::C3::RouteId FSecure::C3::RouteId::Null{ AgentId::Null, DeviceId::Null };

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
FSecure::C3::RouteId::RouteId(std::string_view textId)
	: RouteId( textId.substr(0, AgentId::TextSize), textId.substr(AgentId::TextSize + 1)) // +1 for separator
{
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
FSecure::C3::RouteId::RouteId(ByteView byteId)
	: RouteId(byteId.SubString(0, AgentId::BinarySize), byteId.SubString(AgentId::BinarySize, DeviceId::BinarySize))
{
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
FSecure::C3::RouteId FSecure::C3::RouteId::GenerateRandom()
{
	return { AgentId::GenerateRandom(), DeviceId::GenerateRandom() };
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
std::string FSecure::C3::RouteId::ToString() const
{
	return m_AgentId.ToString() + OBF(":") + m_InterfaceId.ToString();
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
FSecure::ByteVector FSecure::C3::RouteId::ToByteVector() const
{
	// Allocate return vector.
	FSecure::ByteVector retByteVector;
	retByteVector.reserve(m_AgentId.BinarySize + m_InterfaceId.BinarySize);

	// Fill it with aid and iid.
	auto aid = m_AgentId.ToByteVector(), iid = m_InterfaceId.ToByteVector();
	retByteVector.insert(retByteVector.end(), aid.begin(), aid.end());
	retByteVector.insert(retByteVector.end(), iid.begin(), iid.end());

	// That's it.
	return retByteVector;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
FSecure::ByteArray<FSecure::C3::RouteId::BinarySize> FSecure::C3::RouteId::ToByteArray() const
{
	FSecure::ByteArray<BinarySize> retArray;

	// Fill it with aid and iid.
	auto aid = m_AgentId.ToByteVector(), iid = m_InterfaceId.ToByteVector();
	memcpy(retArray.data(), aid.data(), m_AgentId.BinarySize);
	memcpy(retArray.data() + m_AgentId.BinarySize, iid.data(), m_InterfaceId.BinarySize);
	// That's it.
	return retArray;
}


////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
bool FSecure::C3::RouteId::operator!() const
{
	return IsNull();
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
bool FSecure::C3::RouteId::operator==(RouteId const& c) const
{
	return c.m_AgentId == m_AgentId and m_InterfaceId == c.m_InterfaceId;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
bool FSecure::C3::RouteId::operator!=(RouteId const& c) const
{
	return !operator == (c);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
bool FSecure::C3::RouteId::operator<(RouteId const& c) const
{
	return m_AgentId < c.m_AgentId or (m_AgentId == c.m_AgentId and m_InterfaceId < c.m_InterfaceId);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
bool FSecure::C3::RouteId::IsNull() const
{
	return m_AgentId != 0 and m_InterfaceId != 0;
}
